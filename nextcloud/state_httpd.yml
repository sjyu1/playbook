---
- name: State Httpd
  hosts: localhost
  vars:
    service_group: 'Nextcloud1'
  gather_facts: no
  tasks:
##### Deploy VirtualMachine #####
    - name: 배포한 가상머신 정보 수집
      cs_instance_info:
        api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
        api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
        api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
        name: nextcloud-deploy-vm3
      delegate_to: localhost
      register: vm

    - name: 배포 가상머신 ip 정보 수집
      debug:
        msg: "{{ vm.instances[0].nic[0].ipaddress }}"

##### Save State Httpd #####
    - name: 그룹 조회
      ansible.builtin.command: python2 /home/runner/mold_genie_api.py \
        -c listAutomationDeployedResource \
        -ap http -ip "{{ lookup('env', 'MOLD_DEFAULT_URL') }}" -p "{{ lookup('env', 'MOLD_DEFAULT_PORT') }}" \
        -ak "{{ lookup('env', 'MOLD_API_KEY') }}" \
        -sk "{{ lookup('env', 'MOLD_SECRET_KEY') }}" \
        -n "{{ service_group }}"
      register: list
      
    - name: debug list stdout
      set_fact:
        list_jsondata: "{{ list.stdout | from_json }}"
    - debug:
        var: list_jsondata
    - name: group list count
      debug:
        msg: "{{ list_jsondata }}"

    # 그룹등록
    - name: register resource
      ansible.builtin.command: python2 /home/runner/mold_genie_api.py \
        -c addDeployedResourceGroup \
        -ap http -ip "{{ lookup('env', 'MOLD_DEFAULT_URL') }}" -p "{{ lookup('env', 'MOLD_DEFAULT_PORT') }}" \
        -ak "{{ lookup('env', 'MOLD_API_KEY') }}" \
        -sk "{{ lookup('env', 'MOLD_SECRET_KEY') }}" \
        -zid "{{ lookup('env', 'MOLD_ZONE_ID') }}" \
        -n "{{ service_group }}" \
        -d 'Nextcloud description'
      when: list_jsondata.listautomationdeployedresourceresponse == {}

    # 그룹조회
    - name: 그룹 조회
      ansible.builtin.command: python2 /home/runner/mold_genie_api.py \
        -c listAutomationDeployedResource \
        -ap http -ip "{{ lookup('env', 'MOLD_DEFAULT_URL') }}" -p "{{ lookup('env', 'MOLD_DEFAULT_PORT') }}" \
        -ak "{{ lookup('env', 'MOLD_API_KEY') }}" \
        -sk "{{ lookup('env', 'MOLD_SECRET_KEY') }}" \
        -n "{{ service_group }}"
      register: list2
      
    - name: debug list2 stdout
      set_fact:
        list2_jsondata: "{{ list2.stdout | from_json }}"
    - debug:
        var: list2_jsondata
    - name: group list2 count
      debug:
        msg: "{{ list2_jsondata }}"


    # - name: debug resourceGroup stdout
    #   set_fact:
    #     group_jsondata: "{{ resourceGroup.stdout | from_json }}"
    #   when: list_jsondata.listautomationdeployedresourceresponse == {}
    # - debug:
    #     var: group_jsondata
    #   when: list_jsondata.listautomationdeployedresourceresponse == {}  
    # - name: group resourceGroup count
    #   debug:
    #     msg: "{{ group_jsondata }}"
    #   when: list_jsondata.listautomationdeployedresourceresponse == {}  

    # - name: resourceGroup result
    #   debug:
    #     msg: "{{ group_jsondata.adddeployedresourcegroupresponse.automationdeployedresource.id }}"
    #   when: list_jsondata.listautomationdeployedresourceresponse == {}



    # 특정 그룹에 속한 서비스 단위 조회(--추가필요--)

    # 서비스 단위별 상태 삭제
    - name: delete unit resource
      ansible.builtin.command: python2 /home/runner/mold_genie_api.py \
        -c deleteDeployedUnitResource \
        -ap http -ip "{{ lookup('env', 'MOLD_DEFAULT_URL') }}" -p "{{ lookup('env', 'MOLD_DEFAULT_PORT') }}" \
        -ak "{{ lookup('env', 'MOLD_API_KEY') }}" \
        -sk "{{ lookup('env', 'MOLD_SECRET_KEY') }}" \
        -gid "{{ list2_jsondata.listautomationdeployedresourceresponse.automationdeployedresource[0].id }}" \


    # 서비스 단위별 상태체크
    - name: ssh
      ansible.builtin.command: ssh root@{{ vm.instances[0].nic[0].ipaddress }} "systemctl is-active httpd"
      ignore_errors: yes
      register: httpd_state_result
      # delegate_to: genie_vm
    - name: ssh result
      debug:
        msg: "{{ httpd_state_result.stdout }}"

    # 서비스 단위별 상태 등록(httpd)
    - name: register unit resource
      ansible.builtin.command: python2 /home/runner/mold_genie_api.py \
        -c addDeployedUnitResource \
        -ap http -ip "{{ lookup('env', 'MOLD_DEFAULT_URL') }}" -p "{{ lookup('env', 'MOLD_DEFAULT_PORT') }}" \
        -ak "{{ lookup('env', 'MOLD_API_KEY') }}" \
        -sk "{{ lookup('env', 'MOLD_SECRET_KEY') }}" \
        -gid "{{ list2_jsondata.listautomationdeployedresourceresponse.automationdeployedresource[0].id }}" \
        -vid "{{ vm.instances[0].id }}" \
        -un httpd \
        -s "{{ httpd_state_result.stdout }}"

    # 서비스 단위별 상태체크
    - name: ssh
      ansible.builtin.command: ssh root@{{ vm.instances[0].nic[0].ipaddress }} "systemctl is-active mysqld"
      ignore_errors: yes
      register: mysqld_state_result
      # delegate_to: genie_vm
    - name: ssh result
      debug:
        msg: "{{ mysqld_state_result.stdout }}"

    # 서비스 단위별 상태 등록(mysqld)
    - name: register unit resource
      ansible.builtin.command: python2 /home/runner/mold_genie_api.py \
        -c addDeployedUnitResource \
        -ap http -ip "{{ lookup('env', 'MOLD_DEFAULT_URL') }}" -p "{{ lookup('env', 'MOLD_DEFAULT_PORT') }}" \
        -ak "{{ lookup('env', 'MOLD_API_KEY') }}" \
        -sk "{{ lookup('env', 'MOLD_SECRET_KEY') }}" \
        -gid "{{ list2_jsondata.listautomationdeployedresourceresponse.automationdeployedresource[0].id }}" \
        -vid "{{ vm.instances[0].id }}" \
        -un mysqld \
        -s "{{ mysqld_state_result.stdout }}"

    # 서비스 그룹 상태 업데이트
    - name: update group
      ansible.builtin.command: python2 /home/runner/mold_genie_api.py \
        -c updateDeployedResourceGroup \
        -ap http -ip "{{ lookup('env', 'MOLD_DEFAULT_URL') }}" -p "{{ lookup('env', 'MOLD_DEFAULT_PORT') }}" \
        -ak "{{ lookup('env', 'MOLD_API_KEY') }}" \
        -sk "{{ lookup('env', 'MOLD_SECRET_KEY') }}" \
        -gid "{{ list2_jsondata.listautomationdeployedresourceresponse.automationdeployedresource[0].id }}" \
        -s "Active"
      when: httpd_state_result.stdout == 'active' and mysqld_state_result.stdout == 'active'

    - name: update group
      ansible.builtin.command: python2 /home/runner/mold_genie_api.py \
        -c updateDeployedResourceGroup \
        -ap http -ip "{{ lookup('env', 'MOLD_DEFAULT_URL') }}" -p "{{ lookup('env', 'MOLD_DEFAULT_PORT') }}" \
        -ak "{{ lookup('env', 'MOLD_API_KEY') }}" \
        -sk "{{ lookup('env', 'MOLD_SECRET_KEY') }}" \
        -gid "{{ list2_jsondata.listautomationdeployedresourceresponse.automationdeployedresource[0].id }}" \
        -s "Inactive"
      when: httpd_state_result.stdout == 'inactive' or mysqld_state_result.stdout == 'inactive'