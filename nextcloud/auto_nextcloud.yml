---
- name: Genie를 활용한 Mold VM 배포
  hosts: localhost
  gather_facts: no
  tasks:
##### Deploy VirtualMachine #####

    - name: 가상머신 생성
      cs_instance:
        api_url: "{{ MOLD_API_URL }}"
        api_key: "{{ MOLD_API_KEY }}"
        api_secret: "{{ MOLD_SECRET_KEY }}"
        zone: Zone
        name: sj-deploy-vm1
        template: CentOS-8-5-2111
        service_offering: 2C-4GB-RBD
        ssh_key: AutomationController-hwryu
        networks:
          - genie-network1
      delegate_to: localhost

    - name: 배포한 가상머신 정보 수집
      cs_instance_info:
        api_url: "{{ MOLD_API_URL }}"
        api_key: "{{ MOLD_API_KEY }}"
        api_secret: "{{ MOLD_SECRET_KEY }}"
        name: sj-deploy-vm1
      delegate_to: localhost
      register: vm

    - name: 배포 가상머신 ip 정보 수집
      debug:
        msg: "{{ vm.instances[0].nic[0].ipaddress }}"

    - name: Create Public IP
      cs_ip_address:
        api_url: "{{ MOLD_API_URL }}"
        api_key: "{{ MOLD_API_KEY }}"
        api_secret: "{{ MOLD_SECRET_KEY }}"
        zone: Zone
        network: genie-network1
      register: ac_public_ip

    - name: Public IP 정보 수집
      debug:
        msg: "{{ ac_public_ip.ip_address }}"

    - name: Create a static NAT for 'ac_public_ip.ip_address' to sj-deploy-vm1
      cs_staticnat:
        api_url: "{{ MOLD_API_URL }}"
        api_key: "{{ MOLD_API_KEY }}"
        api_secret: "{{ MOLD_SECRET_KEY }}"
        ip_address: "{{ ac_public_ip.ip_address }}"
        zone: Zone
        vm: sj-deploy-vm1
      delegate_to: localhost

    - name: 배포 가상머신 인메모리 inventory에 등록
      add_host:
        hostname: "{{ vm.instances[0].nic[0].ipaddress }}"
        groups:
          - deployVmIp

    - name: Allow 88 port for public ip
      cs_firewall:
        api_url: "{{ MOLD_API_URL }}"
        api_key: "{{ MOLD_API_KEY }}"
        api_secret: "{{ MOLD_SECRET_KEY }}"
        ip_address: "{{ ac_public_ip.ip_address }}"
        zone: Zone
        start_port: 80
        end_port: 80
        protocol: tcp
      delegate_to: localhost

    - name: Allow 22 port for public ip
      cs_firewall:
        api_url: "{{ MOLD_API_URL }}"
        api_key: "{{ MOLD_API_KEY }}"
        api_secret: "{{ MOLD_SECRET_KEY }}"
        ip_address: "{{ ac_public_ip.ip_address }}"
        zone: Zone
        start_port: 22
        end_port: 22
        protocol: tcp
      delegate_to: localhost

##### Deploy Nextcloud #####
- name: "Deploy Nextcloud"
  hosts: deployVmIp
  gather_facts: no
  vars:
    httpd_packages:
      - "httpd"
      - "mod_ssl"
      - "mod_security"
    php_packages:
      - "php"
      - "php-gd"
      - "php-mbstring"
      - "php-intl"
      - "php-pecl-apcu"
      - "php-mysqlnd"
      #- "php-pecl-redis"
      - "php-opcache"
      #- "php-imagick"
      - "php-zip"
      - "php-process"
      - "php-json"
      - "php-ldap"
      - "php-xml"
    mariadb_packages:
      - "mariadb-server"
      - "python3-PyMySQL"
    mariadb_root_pass: "password"
    nextcloud_code: "https://download.nextcloud.com/server/releases/nextcloud-20.0.9.zip"
    nextcloud_db_name: "nextcloud"
    nextcloud_db_user: "nextcloud"
    nextcloud_db_pass: "password"
    nextcloud_admin_name: "nc-admin"
    nextcloud_admin_pass: "password"
    nextcloud_data_dir: "/var/www/html/nextcloud/data"
  tasks:
    # httpd
    - name: "Install httpd"
      ansible.builtin.package:
        name: "{{ httpd_packages }}"
        state: "present"
      become: true
    - name: "Install php"
      ansible.builtin.package:
        name: "{{ php_packages }}"
        state: "present"
      become: true
    - name: "Start & Enable httpd"
      ansible.builtin.service:
        name: "httpd.service"
        state: "started"
        enabled: true
      become: true

    # mariadb
    - name: "Install mariadb"
      ansible.builtin.package:
        name: "{{ mariadb_packages }}"
        state: "present"
      become: true
    - name: "Start & Enable mariadb"
      ansible.builtin.service:
        name: "mariadb.service"
        state: "started"
        enabled: true
      become: true
    - name: "Configure mariadb - root user"
      community.mysql.mysql_user:
        name: "root"
        password: "{{ mariadb_root_pass }}"
        check_implicit_admin: true
        login_user: "root"
        login_password: "{{ mariadb_root_pass }}"
        login_unix_socket: "/var/lib/mysql/mysql.sock"
      become: true
    - name: "Configure mariadb anonymous user"
      community.mysql.mysql_user:
        name: ""
        state: "absent"
        host_all: true
        login_user: "root"
        login_password: "{{ mariadb_root_pass }}"
        login_unix_socket: "/var/lib/mysql/mysql.sock"
      become: true
    - name: "Configure mariadb - test database"
      community.mysql.mysql_db:
        name: "test"
        state: "absent"
        login_user: "root"
        login_password: "{{ mariadb_root_pass }}"
        login_unix_socket: "/var/lib/mysql/mysql.sock"
      become: true

    # nextcloud
    - name: "Install dependencies"
      ansible.builtin.package:
        name: "unzip"
        state: "present"
      become: true
    - name: "Install Nextcloud"
      ansible.builtin.unarchive:
        src: "{{ nextcloud_code }}"
        remote_src: true
        dest: "/var/www/html/"
        keep_newer: true
        owner: "apache"
        group: "apache"
        setype: "httpd_sys_rw_content_t"
      become: true
    - name: "Configure Nextcloud - httpd"
      ansible.builtin.template:
        src: "/home/runner/nextcloud.conf.j2"
        dest: "/etc/httpd/conf.d/nextcloud.conf"
        owner: "root"
        group: "root"
        mode: 0644
      become: true
      #notify:
      #  - "Restart httpd"
    - name: Restart httpd service
      systemd: name=httpd state=restarted
      become: yes
    - name: "Configure Nextcloud - httpd selinux"
      ansible.posix.seboolean:
        name: "{{ item }}"
        persistent: true
        state: true
      become: true
      loop:
        - "httpd_can_network_connect_db"
        - "httpd_unified"
    - name: "Configure Nextcloud - mariadb db"
      community.mysql.mysql_db:
        name: "{{ nextcloud_db_name }}"
        state: "present"
        login_user: "root"
        login_password: "{{ mariadb_root_pass }}"
        login_unix_socket: "/var/lib/mysql/mysql.sock"
      become: true
    - name: "Configure Nextcloud - mariadb user"
      community.mysql.mysql_user:
        name: "{{ nextcloud_db_user }}"
        password: "{{ nextcloud_db_pass }}"
        priv: "{{ nextcloud_db_name }}.*:ALL"
        login_user: "root"
        login_password: "{{ mariadb_root_pass }}"
        login_unix_socket: "/var/lib/mysql/mysql.sock"
      become: true
    - name: "Create data directory"
      ansible.builtin.file:
        path: "{{ nextcloud_data_dir }}"
        state: "directory"
        owner: "apache"
        group: "apache"
        mode: 0750
        setype: "httpd_sys_rw_content_t"
      become: true
    - name: "Check for CAN_INSTALL"
      ansible.builtin.stat:
        path: "/var/www/html/nextcloud/config/CAN_INSTALL"
      register: "r_CAN_INSTALL"
      become: true
    - name: "Configure Nextcloud - autoconfig"
      ansible.builtin.template:
        src: "/home/runner/autoconfig.php.j2"
        dest: "/var/www/html/nextcloud/config/autoconfig.php"
        owner: "apache"
        group: "apache"
        mode: 0640
        setype: "httpd_sys_rw_content_t"
      become: true
      when:
        - "r_CAN_INSTALL.stat.exists | bool"
    # firewall
    - name: "Install firewalld"
      ansible.builtin.package:
        name: "firewalld"
        state: "present"
      become: true
    - name: "Start & Enable firewalld"
      ansible.builtin.service:
        name: "firewalld.service"
        state: "started"
        enabled: true
      become: true
    - name: "Manage Firewalld"
      ansible.posix.firewalld:
        service: "{{ item }}"
        state: "enabled"
        immediate: true
        permanent: true
      become: true
      loop:
        - "http"
        - "https"
