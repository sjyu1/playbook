---
- name: Genie를 활용한 Mold VM 배포
  hosts: localhost
  vars:
    web_instance_nm: 'tier-web-deploy-vm'
    instance_temp: 'CentOS-8-5-2111-cloudinit'
    instance_computeoffer: '2C-4GB-RBD'
  gather_facts: no
  tasks:
##### Deploy VirtualMachine #####

    - name: 가상머신 생성 "{{ web_instance_nm }}"
      cs_instance:
        api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
        api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
        api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
        zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
        name: "{{ web_instance_nm }}"
        template: "{{ instance_temp }}"
        service_offering: "{{ instance_computeoffer }}"
        ssh_key: "{{ lookup('env', 'MOLD_SSH_KEYPAIR') }}"
        user_data: |
            #cloud-config
            disable_root: false
            ssh_pwauth: true
        networks: "{{ lookup('env', 'AC_NETWORK_NAME') }}"
      register: vm

    - name: 가상머신 생성 후 ssh_key 생성을 위한 대기
      wait_for:
        timeout: 20

    - name: 배포 가상머신 ip 정보 수집
      debug:
        msg: "{{ vm.default_ip }}"

    - name: 배포 가상머신 인메모리 inventory에 등록
      add_host:
        hostname: "{{ vm.default_ip }}"
        groups:
          - web-deployVmIp

##### Deploy WebServer #####
- name: "Deploy WebServer"
  hosts: web-deployVmIp
  vars:
    was_instance_nm: 'tier-was-deploy-vm'
  gather_facts: no
  tasks:
  # Install nginx
  - name: "Install nginx"
    ansible.builtin.package:
      name: "nginx"
      state: "present"

  # Config nginx
  - name: Download nginx-was conf file
    get_url:
      url: "https://images.ablecloud.io/genie/3tier/nginx-was.conf"
      dest: "/etc/nginx/conf.d/"
  
  - name: 배포한 가상머신 정보 수집("{{ was_instance_nm }}")
    cs_instance_info:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      name: "{{ was_instance_nm }}"
    delegate_to: localhost
    register: vm

  - name: 배포 가상머신 ip 정보 수집
    debug:
      msg: "{{ vm.instances[0].nic[0].ipaddress }}"

  - name: lineinfile
    lineinfile:
      path: /etc/hosts
      line: "{{ vm.instances[0].nic[0].ipaddress }} was-server"

  - name: Set httpd_can_network_connect flag on and keep it persistent across reboots
    ansible.posix.seboolean:
      name: httpd_can_network_connect
      state: yes
      persistent: yes

  # Start nginx
  - name: Start nginx
    ansible.builtin.service:
      name: "nginx.service"
      state: "restarted"

  # css, images file download
  - name: Download css file
    get_url:
      url: "https://images.ablecloud.io/genie/3tier/css.zip"
      dest: "/tmp/css.zip"
  - name: Extract css archive
    ansible.builtin.unarchive:
      src: "/tmp/css.zip"
      dest: /usr/share/nginx/html/
      remote_src: yes

  - name: Download images file
    get_url:
      url: "https://images.ablecloud.io/genie/3tier/images.zip"
      dest: "/tmp/images.zip"
  - name: Extract images archive
    ansible.builtin.unarchive:
      src: "/tmp/images.zip"
      dest: /usr/share/nginx/html/
      remote_src: yes

  - name: do permit traffic in default zone on port 8080/tcp
    ansible.posix.firewalld:
      port: 8080/tcp
      permanent: yes
      state: enabled

  # - name: do permit traffic in default zone on port 443/tcp
  #   ansible.posix.firewalld:
  #     port: 443/tcp
  #     permanent: yes
  #     state: enabled

  - name: firewalld reload
    ansible.builtin.service:
      name: "firewalld.service"
      state: "restarted"