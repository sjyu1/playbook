---
### Deploy WEB VirtualMachine ###
- name: Genie를 활용한 Mold VM 배포(WEB Server)
  hosts: localhost
  vars:
    web_instance_nm: "tier-web-deploy-vm"
    instance_temp: 'CentOS-8-5-2111-cloudinit'
    instance_computeoffer: '2C-4GB-RBD'
  gather_facts: no
  tasks:

  - name: 가상머신 생성 "{{ web_instance_nm }}"
    cs_instance:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
      name: "{{ web_instance_nm }}"
      template: "{{ instance_temp }}"
      service_offering: "{{ instance_computeoffer }}"
      ssh_key: "{{ lookup('env', 'MOLD_SSH_KEYPAIR') }}"
      user_data: |
          #cloud-config
          disable_root: false
          ssh_pwauth: true
      networks: "{{ lookup('env', 'AC_NETWORK_NAME') }}"
    register: web_vm

  - name: 생성한 가상머신이 부팅이 완료될 때까지 대기
    wait_for_connection:
      delay: 20
      timeout: 300

  - name: 배포 가상머신 ip 정보 수집
    debug:
      msg: "{{ web_vm.default_ip }}"

  - name: 배포 가상머신 인메모리 inventory에 등록
    add_host:
      hostname: "{{ web_vm.default_ip }}"
      groups:
        - web_deployVmIp

  - name: Create Public IP
    cs_ip_address:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
      network: "{{ lookup('env', 'AC_NETWORK_NAME') }}"
    register: ac_public_ip

  - name: Public IP 정보 수집
    debug:
      msg: "{{ ac_public_ip.ip_address }}"

  - name: Create a static NAT for "ac_public_ip.ip_address" to "{{ web_instance_nm }}"
    cs_staticnat:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
      ip_address: "{{ ac_public_ip.ip_address }}"
      vm: "{{ web_instance_nm }}"
    delegate_to: localhost

  - name: Allow 8080 port for public ip
    cs_firewall:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
      ip_address: "{{ ac_public_ip.ip_address }}"
      start_port: 8080
      end_port: 8080
      protocol: tcp
    delegate_to: localhost

  - name: Allow 22 port for public ip
    cs_firewall:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
      ip_address: "{{ ac_public_ip.ip_address }}"
      start_port: 22
      end_port: 22
      protocol: tcp
    delegate_to: localhost

### Deploy Web Server ###
- name: Deploy Web Server
  hosts: web_deployVmIp
  vars:
    # Register was server ip in /etc/hosts for nginx configuration
    was_instance_nm: "tier-was-deploy-vm"
  gather_facts: no
  tasks:

  # Install nginx
  - name: Install nginx
    ansible.builtin.package:
      name: nginx
      state: present

  - name: Download nginx-was conf file
    get_url:
      url: "https://images.ablecloud.io/genie/3tier/nginx-was.conf"
      dest: "/etc/nginx/conf.d/"
  
  - name: 배포한 가상머신 정보 수집("{{ was_instance_nm }}")
    cs_instance_info:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      name: "{{ was_instance_nm }}"
    delegate_to: localhost
    register: was_vm

  - name: 배포 가상머신 ip 정보 수집
    debug:
      msg: "{{ was_vm.instances[0].nic[0].ipaddress }}"

  - name: lineinfile to /etc/hosts
    lineinfile:
      path: /etc/hosts
      line: "{{ was_vm.instances[0].nic[0].ipaddress }} was-server"

  - name: Set httpd_can_network_connect flag on
    ansible.posix.seboolean:
      name: httpd_can_network_connect
      state: yes
      persistent: yes

  - name: Start nginx
    ansible.builtin.service:
      name: nginx.service
      state: restarted

  # css, images file download
  - name: Download css file
    get_url:
      url: "https://images.ablecloud.io/genie/3tier/css.zip"
      dest: "/tmp/css.zip"
  - name: Extract css archive
    ansible.builtin.unarchive:
      src: "/tmp/css.zip"
      dest: /usr/share/nginx/html/
      remote_src: yes

  - name: Download images file
    get_url:
      url: "https://images.ablecloud.io/genie/3tier/images.zip"
      dest: "/tmp/images.zip"
  - name: Extract images archive
    ansible.builtin.unarchive:
      src: "/tmp/images.zip"
      dest: /usr/share/nginx/html/
      remote_src: yes

  - name: Allow port 8080/tcp traffic
    ansible.posix.firewalld:
      port: 8080/tcp
      permanent: yes
      state: enabled

  # - name: Allow port 443/tcp traffic
  #   ansible.posix.firewalld:
  #     port: 443/tcp
  #     permanent: yes
  #     state: enabled

  - name: Reload firewalld
    ansible.builtin.service:
      name: firewalld.service
      state: restarted