---
- name: Genie를 활용한 Mold VM 배포
  hosts: localhost
  vars:
    db_instance_nm: 'tier-db-deploy-vm'
    instance_temp: 'CentOS-8-5-2111-cloudinit'
    instance_computeoffer: '2C-4GB-RBD'
  gather_facts: no
  tasks:
##### Deploy VirtualMachine #####

    - name: 가상머신 생성 "{{ db_instance_nm }}"
      cs_instance:
        api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
        api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
        api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
        zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
        name: "{{ db_instance_nm }}"
        template: "{{ instance_temp }}"
        service_offering: "{{ instance_computeoffer }}"
        ssh_key: "{{ lookup('env', 'MOLD_SSH_KEYPAIR') }}"
        user_data: |
            #cloud-config
            disable_root: false
            ssh_pwauth: true
        networks: "{{ lookup('env', 'AC_NETWORK_NAME') }}"
      register: vm

    - name: 가상머신 생성 후 ssh_key 생성을 위한 대기
      wait_for:
        timeout: 20

    - name: 배포 가상머신 ip 정보 수집
      debug:
        msg: "{{ vm.default_ip }}"

    - name: 배포 가상머신 인메모리 inventory에 등록
      add_host:
        hostname: "{{ vm.default_ip }}"
        groups:
          - db-deployVmIp

##### Deploy DBServer #####
- name: "Deploy DBServer"
  hosts: db-deployVmIp
  gather_facts: no
  vars:
    #MySQL Settings
    - mysql_root_password: Ablecloud1!
    - mysql_db: cloud
  tasks:
  # Install MySQL
    - name: Install MySQL Packages
      yum: name={{ item }} update_cache=yes state=latest
      loop: [ 'mysql-server', 'php-mysqlnd', 'python3-PyMySQL' ]

    - name: Start mysqld service
      systemd: name=mysqld state=started enabled=yes

    - name: Set MySQL root Password
      community.mysql.mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_user: root
        login_password: ""
        host: "{{ item }}"
        priv: "*.*:ALL,GRANT"
        state: present
      with_items:
        - localhost
        - "%"

    - name: Creates database
      community.mysql.mysql_db:
        name: "{{ mysql_db }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Copy database dump file
      copy:
        src: /home/runner/db.sql.j2
        dest: /tmp

    - name: Restore database
      community.mysql.mysql_db:
        name: "{{ mysql_db }}"
        state: import
        login_user: root
        login_password: "{{ mysql_root_password }}"
        target: /tmp/db.sql.j2

    - name: do permit traffic in default zone on port 3306/tcp
      ansible.posix.firewalld:
        port: 3306/tcp
        permanent: yes
        state: enabled

    - name: firewalld reload
      ansible.builtin.service:
        name: "firewalld.service"
        state: "restarted"

    