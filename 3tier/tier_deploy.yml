---
### Deploy DB VirtualMachine ###
- name: Genie를 활용한 Mold VM 배포(DB Server)
  hosts: localhost
  vars:
    db_instance_nm: "tier-db-deploy-vm"
  gather_facts: no
  tasks:

  - name: 가상머신 생성 "{{ db_instance_nm }}"
    cs_instance:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
      name: "{{ db_instance_nm }}"
      template: "{{ instance_temp }}"
      service_offering: "{{ instance_computeoffer }}"
      ssh_key: "{{ lookup('env', 'MOLD_SSH_KEYPAIR') }}"
      user_data: |
          #cloud-config
          disable_root: false
          ssh_pwauth: true
      networks: "{{ lookup('env', 'AC_NETWORK_NAME') }}"
    register: db_vm

  - name: 가상머신 생성 후 ssh_key 생성을 위한 대기
    wait_for:
      timeout: 20

  - name: 배포 가상머신 ip 정보 수집
    debug:
      msg: "{{ db_vm.default_ip }}"

  - name: 배포 가상머신 인메모리 inventory에 등록
    add_host:
      hostname: "{{ db_vm.default_ip }}"
      groups:
        - db_deployVmIp

### Deploy DB Server ###
- name: Deploy DB Server
  hosts: db_deployVmIp
  gather_facts: no
  vars:
    # MySQL Settings
    - mysql_root_password: Ablecloud1!
    - mysql_db: cloud
  tasks:

    # Install MySQL
    - name: Install MySQL Packages
      yum: name={{ item }} update_cache=yes state=latest
      loop: [ 'mysql-server', 'php-mysqlnd', 'python3-PyMySQL' ]

    - name: Start mysqld service
      systemd: name=mysqld state=started enabled=yes
        
    - name: Set MySQL root Password
      community.mysql.mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_user: root
        login_password: ""
        state: present

    - name: Set MySQL root Grants
      community.mysql.mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_user: root
        login_password: "{{ mysql_root_password }}"
        host: "{{ item }}"
        priv: "*.*:ALL,GRANT"
        state: present
      with_items:
        - localhost
        - "%"

    - name: Create database
      community.mysql.mysql_db:
        name: "{{ mysql_db }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Download sql file
      get_url:
        url: "https://images.ablecloud.io/genie/3tier/db.sql"
        dest: /tmp/

    - name: Restore database
      community.mysql.mysql_db:
        name: "{{ mysql_db }}"
        state: import
        login_user: root
        login_password: "{{ mysql_root_password }}"
        target: /tmp/db.sql

    - name: Allow port 3306/tcp traffic
      ansible.posix.firewalld:
        port: 3306/tcp
        permanent: yes
        state: enabled

    - name: Reload firewalld
      ansible.builtin.service:
        name: firewalld.service
        state: restarted

#=============================================================

### Deploy WAS VirtualMachine ###
- name: Genie를 활용한 Mold VM 배포(WAS Server)
  hosts: localhost
  vars:
    was_instance_nm: "tier-was-deploy-vm"
  gather_facts: no
  tasks:

  - name: 가상머신 생성 "{{ was_instance_nm }}"
    cs_instance:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
      name: "{{ was_instance_nm }}"
      template: "{{ instance_temp }}"
      service_offering: "{{ instance_computeoffer }}"
      ssh_key: "{{ lookup('env', 'MOLD_SSH_KEYPAIR') }}"
      user_data: |
          #cloud-config
          disable_root: false
          ssh_pwauth: true
      networks: "{{ lookup('env', 'AC_NETWORK_NAME') }}"
    register: was_vm

  - name: 가상머신 생성 후 ssh_key 생성을 위한 대기
    wait_for:
      timeout: 20

  - name: 배포 가상머신 ip 정보 수집
    debug:
      msg: "{{ was_vm.default_ip }}"

  - name: 배포 가상머신 인메모리 inventory에 등록
    add_host:
      hostname: "{{ was_vm.default_ip }}"
      groups:
        - was_deployVmIp

### Deploy WAS Server ##
- name: Deploy WAS Server
  hosts: was_deployVmIp
  gather_facts: no
  vars:
    # Register db server ip in /etc/hosts for context-datasource.xml
    db_instance_nm: tier-db-deploy-vm
  tasks:
  
  # Install Tomcat
  - name: Install Java 8
    yum:
      name: java-1.8.0-openjdk
      state: present
  
  - name: Download Tomcat
    get_url:
      url: "https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.64/bin/apache-tomcat-9.0.64.tar.gz"
      dest: "/tmp/apache-tomcat-9.0.64.tar.gz"

  - name: Unarchive Tomcat
    ansible.builtin.unarchive:
      src: "/tmp/apache-tomcat-9.0.64.tar.gz"
      dest: /usr/local
      remote_src: yes
      # extra_opts: "--strip-components=1"
      # creates: /usr/local/bin

  - name: Download Tomcat service file
    get_url:
      url: "https://images.ablecloud.io/genie/3tier/tomcat.service"
      dest: "/etc/systemd/system/"
    
  - name: Start and Enable Tomcat
    ansible.builtin.systemd:
      daemon_reload: yes
      name: tomcat
      state: restarted
      enabled: yes

  - name: Delete ROOT Directory
    command: rm -rf /usr/local/apache-tomcat-9.0.64/webapps/ROOT
  #     ansible.builtin.file:
  #       path: "/usr/local/apache-tomcat-9.0.64/webapps/ROOT"
  #       state: absent

  - name: Download ROOT.war
    get_url:
      url: "https://images.ablecloud.io/genie/3tier/ROOT.war"
      dest: "/usr/local/apache-tomcat-9.0.64/webapps/"

  # - name: Restart Tomcat
  #   ansible.builtin.service:
  #     name: tomcat.service
  #     state: restarted

  - name: 배포한 DB 가상머신 정보 수집("{{ db_instance_nm }}")
    cs_instance_info:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      name: "{{ db_instance_nm }}"
    delegate_to: localhost
    register: db_vm

  - name: 배포 가상머신 ip 정보 수집
    debug:
      msg: "{{ db_vm.instances[0].nic[0].ipaddress }}"

  - name: lineinfile to /etc/hosts
    lineinfile:
      path: /etc/hosts
      line: "{{ db_vm.instances[0].nic[0].ipaddress }} db-server"

  # - name: Replace between the expressions
  #   ansible.builtin.replace:
  #     path: /usr/local/apache-tomcat-9.0.64/webapps/ROOT/src/main/resources/egovframework/spring/context-datasource.xml
  #     after: "{{ vm.instances[0].nic[0].ipaddress }}"
  #     before: "dbserver"

  - name: Restart Tomcat
    ansible.builtin.service:
      name: tomcat.service
      state: restarted

  - name: Allow port 8080/tcp traffic
    ansible.posix.firewalld:
      port: 8080/tcp
      permanent: yes
      state: enabled

  - name: Reload firewalld
    ansible.builtin.service:
      name: firewalld.service
      state: restarted

#=============================================================

### Deploy WEB VirtualMachine ###
- name: Genie를 활용한 Mold VM 배포(WEB Server)
  hosts: localhost
  vars:
    web_instance_nm: "tier-web-deploy-vm"
  gather_facts: no
  tasks:

  - name: 가상머신 생성 "{{ web_instance_nm }}"
    cs_instance:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
      name: "{{ web_instance_nm }}"
      template: "{{ instance_temp }}"
      service_offering: "{{ instance_computeoffer }}"
      ssh_key: "{{ lookup('env', 'MOLD_SSH_KEYPAIR') }}"
      user_data: |
          #cloud-config
          disable_root: false
          ssh_pwauth: true
      networks: "{{ lookup('env', 'AC_NETWORK_NAME') }}"
    register: web_vm

  - name: 가상머신 생성 후 ssh_key 생성을 위한 대기
    wait_for:
      timeout: 20

  - name: 배포 가상머신 ip 정보 수집
    debug:
      msg: "{{ web_vm.default_ip }}"

  - name: 배포 가상머신 인메모리 inventory에 등록
    add_host:
      hostname: "{{ web_vm.default_ip }}"
      groups:
        - web_deployVmIp

  - name: Create Public IP
    cs_ip_address:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
      network: "{{ lookup('env', 'AC_NETWORK_NAME') }}"
    register: ac_public_ip

  - name: Public IP 정보 수집
    debug:
      msg: "{{ ac_public_ip.ip_address }}"

  - name: Create a static NAT for "ac_public_ip.ip_address" to "{{ web_instance_nm }}"
    cs_staticnat:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
      ip_address: "{{ ac_public_ip.ip_address }}"
      vm: "{{ web_instance_nm }}"
    delegate_to: localhost

  - name: Allow 8080 port for public ip
    cs_firewall:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
      ip_address: "{{ ac_public_ip.ip_address }}"
      start_port: 8080
      end_port: 8080
      protocol: tcp
    delegate_to: localhost

  - name: Allow 22 port for public ip
    cs_firewall:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
      ip_address: "{{ ac_public_ip.ip_address }}"
      start_port: 22
      end_port: 22
      protocol: tcp
    delegate_to: localhost

### Deploy Web Server ###
- name: Deploy Web Server
  hosts: web_deployVmIp
  vars:
    # Register was server ip in /etc/hosts for nginx configuration
    was_instance_nm: "tier-was-deploy-vm"
  gather_facts: no
  tasks:

  # Install nginx
  - name: Install nginx
    ansible.builtin.package:
      name: nginx
      state: present

  - name: Download nginx-was conf file
    get_url:
      url: "https://images.ablecloud.io/genie/3tier/nginx-was.conf"
      dest: "/etc/nginx/conf.d/"
  
  - name: 배포한 가상머신 정보 수집("{{ was_instance_nm }}")
    cs_instance_info:
      api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
      api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
      api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
      name: "{{ was_instance_nm }}"
    delegate_to: localhost
    register: was_vm

  - name: 배포 가상머신 ip 정보 수집
    debug:
      msg: "{{ was_vm.instances[0].nic[0].ipaddress }}"

  - name: lineinfile to /etc/hosts
    lineinfile:
      path: /etc/hosts
      line: "{{ was_vm.instances[0].nic[0].ipaddress }} was-server"

  - name: Set httpd_can_network_connect flag on
    ansible.posix.seboolean:
      name: httpd_can_network_connect
      state: yes
      persistent: yes

  - name: Start nginx
    ansible.builtin.service:
      name: nginx.service
      state: restarted

  # css, images file download
  - name: Download css file
    get_url:
      url: "https://images.ablecloud.io/genie/3tier/css.zip"
      dest: "/tmp/css.zip"
  - name: Extract css archive
    ansible.builtin.unarchive:
      src: "/tmp/css.zip"
      dest: /usr/share/nginx/html/
      remote_src: yes

  - name: Download images file
    get_url:
      url: "https://images.ablecloud.io/genie/3tier/images.zip"
      dest: "/tmp/images.zip"
  - name: Extract images archive
    ansible.builtin.unarchive:
      src: "/tmp/images.zip"
      dest: /usr/share/nginx/html/
      remote_src: yes

  - name: Allow port 8080/tcp traffic
    ansible.posix.firewalld:
      port: 8080/tcp
      permanent: yes
      state: enabled

  # - name: Allow port 443/tcp traffic
  #   ansible.posix.firewalld:
  #     port: 443/tcp
  #     permanent: yes
  #     state: enabled

  - name: Reload firewalld
    ansible.builtin.service:
      name: firewalld.service
      state: restarted

#=============================================================

- name: 서비스 상태체크 스케줄러 생성
  hosts: genie_vm
  vars:
    base_path: "genie"
    genie_ip: "localhost"
  gather_facts: no
  tasks:

    - name: AWX 초기 관리자 패스워드 추출
      shell: kubectl get -n awx secret awx-admin-password -o jsonpath="{.data.password}" | base64 --decode
      register: admin_password

    - name: 상태체크 job 실행
      awx.awx.job_launch:
        job_template: tier_check
        controller_host: "http://{{ genie_ip }}:80"
        controller_username: admin
        controller_password: "{{ admin_password.stdout }}"

    - name: Genie job 스케줄러 생성
      awx.awx.schedule:
        name: tier_check
        state: present
        unified_job_template: tier_check
        rrule: "DTSTART;TZID=Asia/Seoul:20220101T120000 RRULE:FREQ=MINUTELY;INTERVAL=1"
        controller_host: "http://{{ genie_ip }}:80"
        controller_username: admin
        controller_password: "{{ admin_password.stdout }}"